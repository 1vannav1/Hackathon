import PySimpleGUI as sg
import matplotlib.pyplot as plt
import networkx as nx
import tempfile
import os


# -----------------------------------------------------------------------------
# 1. Функция, которая рисует схематическую диаграмму (граф) энергетической системы:
#    - Узлы: ГТЭС, котельные, потребители
#    - Рёбра: связь между узлами
# -----------------------------------------------------------------------------
def draw_energy_system_schematic():
    """
    Создаёт упрощённую схему (граф) энергетической системы.
    Возвращает путь к PNG-файлу с диаграммой, чтобы отобразить в PySimpleGUI.
    """

    # Пример: создаём граф (networkx)
    G = nx.Graph()

    # Узлы-источники
    G.add_node("ГТЭС")  # газотурбинная электростанция
    G.add_node("Котельная-1")  # пример котельной
    G.add_node("Котельная-2")

    # Узлы-потребители (можно расширять)
    G.add_node("УКПГ")
    G.add_node("ОБП")
    G.add_node("ВЖК")

    # Рёбра - связи между ними (электрические/тепловые линии)
    G.add_edge("ГТЭС", "УКПГ")
    G.add_edge("ГТЭС", "ОБП")
    G.add_edge("ГТЭС", "ВЖК")

    # Предположим, котельные обеспечивают теплом те же объекты:
    G.add_edge("Котельная-1", "УКПГ")
    G.add_edge("Котельная-2", "ОБП")

    # Можно отрисовать как "сеть":
    pos = nx.spring_layout(G)  # алгоритм позиционирования

    # Рисуем
    fig, ax = plt.subplots()
    nx.draw_networkx(G, pos, with_labels=True, ax=ax)
    plt.title("Схема энергетической системы")

    # Сохраняем во временный PNG, чтобы затем вставить в GUI
    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
        tmp_filename = tmp.name
    plt.savefig(tmp_filename)
    plt.close(fig)

    return tmp_filename


# -----------------------------------------------------------------------------
# 2. Функция (заглушка), которая имитирует чтение CSV и расчёт/оптимизацию,
#    возвращая "набор переключений" и "себестоимости".
#    В реальном приложении вы бы здесь подгружали графики потребления
#    и вызывали EnergySystemModel, GTESModel и пр.
# -----------------------------------------------------------------------------
def run_simulation(csv_path):
    """
    Заглушка, имитирующая работу оптимизационной модели.
    :param csv_path: путь к CSV с графиками потребления
    :return: (commands, cost_info)
      commands  - текст с командами переключений
      cost_info - текст с итоговыми себестоимостями
    """

    # 1) Загрузить csv_path, парсить потребления (тепло/электричество)
    # 2) Запустить EnergySystemModel (или HeatSystemModel + PowerGridModel + GTESModel)
    # 3) Получить результаты: переключения, общую себестоимость и т.д.

    # Для демонстрации вернём "заглушку":
    commands = (
        "Рекомендуемый набор переключений:\n"
        " - Включить ГТУ #1 с 00:00 до 06:00\n"
        " - Перевести ГТУ #2 в резерв после 06:00\n"
        " - Котельную-1 поддерживать в режиме 50%\n"
        " - ... (далее по алгоритму)\n"
    )
    cost_info = (
        "Себестоимость:\n"
        " - Электроэнергия: 2.34 руб/кВт*ч (среднее)\n"
        " - Тепловая энергия: 4000 руб/Гкал (при утилизации) или 4500 руб/Гкал (из котельных)\n"
        " - Итого за период: 14 200 000 руб.\n"
    )

    return commands, cost_info


# -----------------------------------------------------------------------------
# 3. Основная функция, создающая окно (GUI) и объединяющая всё.
#    Пользователь указывает CSV, нажимает "Run Simulation",
#    видит схему системы, текст рекомендаций и себестоимости.
# -----------------------------------------------------------------------------
def main():
    sg.change_look_and_feel(
        "SystemDefault"
    )  # стиль оформления (не меняем цвета вручную)

    # Описание расположения элементов интерфейса:
    layout = [
        [
            sg.Text("Выберите CSV-файл с графиками потребления:"),
            sg.Input(key="-CSV-"),
            sg.FileBrowse(),
        ],
        [sg.Button("Выполнить расчёт"), sg.Button("Выход")],
        [sg.Text("Рекомендуемый набор команд (переключений):")],
        [sg.Multiline(size=(80, 8), key="-COMMANDS-")],
        [sg.Text("Себестоимость по каждому виду энергии:")],
        [sg.Multiline(size=(80, 5), key="-COST-")],
        [sg.Text("Визуализация схемы энергетической системы:")],
        [sg.Image(key="-SCHEMATIC-")],
    ]

    # Создаём окно
    window = sg.Window("Энергетическая система месторождения", layout, finalize=True)

    # Рисуем/обновляем схему в Image
    schematic_file = draw_energy_system_schematic()
    window["-SCHEMATIC-"].update(filename=schematic_file)

    # Основной цикл обработки событий
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED or event == "Выход":
            break
        elif event == "Выполнить расчёт":
            csv_path = values["-CSV-"]  # путь к выбранному пользователем CSV
            # вызывать run_simulation(csv_path):
            recommended_cmds, cost_info = run_simulation(csv_path)
            # обновить поля на экране
            window["-COMMANDS-"].update(recommended_cmds)
            window["-COST-"].update(cost_info)

    # Закрываем окно
    window.close()


if __name__ == "__main__":
    main()
